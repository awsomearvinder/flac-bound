initSidebarItems({"constant":[["BIG_ENDIAN",""],["BUFSIZ",""],["BYTE_ORDER",""],["EOF",""],["EXIT_FAILURE",""],["EXIT_SUCCESS",""],["FD_SETSIZE",""],["FILENAME_MAX",""],["FLAC_API_VERSION_AGE",""],["FLAC_API_VERSION_CURRENT",""],["FLAC_API_VERSION_REVISION",""],["FLAC__ChannelAssignment_FLAC__CHANNEL_ASSIGNMENT_INDEPENDENT","< independent channels"],["FLAC__ChannelAssignment_FLAC__CHANNEL_ASSIGNMENT_LEFT_SIDE","< left+side stereo"],["FLAC__ChannelAssignment_FLAC__CHANNEL_ASSIGNMENT_MID_SIDE","< mid+side stereo"],["FLAC__ChannelAssignment_FLAC__CHANNEL_ASSIGNMENT_RIGHT_SIDE","< right+side stereo"],["FLAC__EntropyCodingMethodType_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE",""],["FLAC__EntropyCodingMethodType_FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE2",""],["FLAC__FrameNumberType_FLAC__FRAME_NUMBER_TYPE_FRAME_NUMBER","< number contains the frame number"],["FLAC__FrameNumberType_FLAC__FRAME_NUMBER_TYPE_SAMPLE_NUMBER","< number contains the sample number of first sample in frame"],["FLAC__MAX_BITS_PER_SAMPLE",""],["FLAC__MAX_BLOCK_SIZE",""],["FLAC__MAX_CHANNELS",""],["FLAC__MAX_FIXED_ORDER",""],["FLAC__MAX_LPC_ORDER",""],["FLAC__MAX_METADATA_TYPE_CODE",""],["FLAC__MAX_QLP_COEFF_PRECISION",""],["FLAC__MAX_RICE_PARTITION_ORDER",""],["FLAC__MAX_SAMPLE_RATE",""],["FLAC__MIN_BITS_PER_SAMPLE",""],["FLAC__MIN_BLOCK_SIZE",""],["FLAC__MIN_QLP_COEFF_PRECISION",""],["FLAC__MetadataType_FLAC__MAX_METADATA_TYPE",""],["FLAC__MetadataType_FLAC__METADATA_TYPE_APPLICATION",""],["FLAC__MetadataType_FLAC__METADATA_TYPE_CUESHEET",""],["FLAC__MetadataType_FLAC__METADATA_TYPE_PADDING",""],["FLAC__MetadataType_FLAC__METADATA_TYPE_PICTURE",""],["FLAC__MetadataType_FLAC__METADATA_TYPE_SEEKTABLE",""],["FLAC__MetadataType_FLAC__METADATA_TYPE_STREAMINFO",""],["FLAC__MetadataType_FLAC__METADATA_TYPE_UNDEFINED",""],["FLAC__MetadataType_FLAC__METADATA_TYPE_VORBIS_COMMENT",""],["FLAC__Metadata_ChainStatus_FLAC__METADATA_CHAIN_STATUS_BAD_METADATA",""],["FLAC__Metadata_ChainStatus_FLAC__METADATA_CHAIN_STATUS_ERROR_OPENING_FILE",""],["FLAC__Metadata_ChainStatus_FLAC__METADATA_CHAIN_STATUS_ILLEGAL_INPUT",""],["FLAC__Metadata_ChainStatus_FLAC__METADATA_CHAIN_STATUS_INTERNAL_ERROR",""],["FLAC__Metadata_ChainStatus_FLAC__METADATA_CHAIN_STATUS_INVALID_CALLBACKS",""],["FLAC__Metadata_ChainStatus_FLAC__METADATA_CHAIN_STATUS_MEMORY_ALLOCATION_ERROR",""],["FLAC__Metadata_ChainStatus_FLAC__METADATA_CHAIN_STATUS_NOT_A_FLAC_FILE",""],["FLAC__Metadata_ChainStatus_FLAC__METADATA_CHAIN_STATUS_NOT_WRITABLE",""],["FLAC__Metadata_ChainStatus_FLAC__METADATA_CHAIN_STATUS_OK",""],["FLAC__Metadata_ChainStatus_FLAC__METADATA_CHAIN_STATUS_READ_ERROR",""],["FLAC__Metadata_ChainStatus_FLAC__METADATA_CHAIN_STATUS_READ_WRITE_MISMATCH",""],["FLAC__Metadata_ChainStatus_FLAC__METADATA_CHAIN_STATUS_RENAME_ERROR",""],["FLAC__Metadata_ChainStatus_FLAC__METADATA_CHAIN_STATUS_SEEK_ERROR",""],["FLAC__Metadata_ChainStatus_FLAC__METADATA_CHAIN_STATUS_UNLINK_ERROR",""],["FLAC__Metadata_ChainStatus_FLAC__METADATA_CHAIN_STATUS_WRITE_ERROR",""],["FLAC__Metadata_ChainStatus_FLAC__METADATA_CHAIN_STATUS_WRONG_WRITE_CALL",""],["FLAC__Metadata_SimpleIteratorStatus_FLAC__METADATA_SIMPLE_ITERATOR_STATUS_BAD_METADATA",""],["FLAC__Metadata_SimpleIteratorStatus_FLAC__METADATA_SIMPLE_ITERATOR_STATUS_ERROR_OPENING_FILE",""],["FLAC__Metadata_SimpleIteratorStatus_FLAC__METADATA_SIMPLE_ITERATOR_STATUS_ILLEGAL_INPUT",""],["FLAC__Metadata_SimpleIteratorStatus_FLAC__METADATA_SIMPLE_ITERATOR_STATUS_INTERNAL_ERROR",""],["FLAC__Metadata_SimpleIteratorStatus_FLAC__METADATA_SIMPLE_ITERATOR_STATUS_MEMORY_ALLOCATION_ERROR",""],["FLAC__Metadata_SimpleIteratorStatus_FLAC__METADATA_SIMPLE_ITERATOR_STATUS_NOT_A_FLAC_FILE",""],["FLAC__Metadata_SimpleIteratorStatus_FLAC__METADATA_SIMPLE_ITERATOR_STATUS_NOT_WRITABLE",""],["FLAC__Metadata_SimpleIteratorStatus_FLAC__METADATA_SIMPLE_ITERATOR_STATUS_OK",""],["FLAC__Metadata_SimpleIteratorStatus_FLAC__METADATA_SIMPLE_ITERATOR_STATUS_READ_ERROR",""],["FLAC__Metadata_SimpleIteratorStatus_FLAC__METADATA_SIMPLE_ITERATOR_STATUS_RENAME_ERROR",""],["FLAC__Metadata_SimpleIteratorStatus_FLAC__METADATA_SIMPLE_ITERATOR_STATUS_SEEK_ERROR",""],["FLAC__Metadata_SimpleIteratorStatus_FLAC__METADATA_SIMPLE_ITERATOR_STATUS_UNLINK_ERROR",""],["FLAC__Metadata_SimpleIteratorStatus_FLAC__METADATA_SIMPLE_ITERATOR_STATUS_WRITE_ERROR",""],["FLAC__REFERENCE_CODEC_MAX_BITS_PER_SAMPLE",""],["FLAC__STREAM_METADATA_HEADER_LENGTH",""],["FLAC__STREAM_METADATA_SEEKPOINT_LENGTH",""],["FLAC__STREAM_METADATA_STREAMINFO_LENGTH",""],["FLAC__STREAM_SYNC_LENGTH",""],["FLAC__SUBSET_MAX_BLOCK_SIZE_48000HZ",""],["FLAC__SUBSET_MAX_LPC_ORDER_48000HZ",""],["FLAC__SUBSET_MAX_RICE_PARTITION_ORDER",""],["FLAC__StreamDecoderErrorStatus_FLAC__STREAM_DECODER_ERROR_STATUS_BAD_HEADER",""],["FLAC__StreamDecoderErrorStatus_FLAC__STREAM_DECODER_ERROR_STATUS_FRAME_CRC_MISMATCH",""],["FLAC__StreamDecoderErrorStatus_FLAC__STREAM_DECODER_ERROR_STATUS_LOST_SYNC",""],["FLAC__StreamDecoderErrorStatus_FLAC__STREAM_DECODER_ERROR_STATUS_UNPARSEABLE_STREAM",""],["FLAC__StreamDecoderInitStatus_FLAC__STREAM_DECODER_INIT_STATUS_ALREADY_INITIALIZED",""],["FLAC__StreamDecoderInitStatus_FLAC__STREAM_DECODER_INIT_STATUS_ERROR_OPENING_FILE",""],["FLAC__StreamDecoderInitStatus_FLAC__STREAM_DECODER_INIT_STATUS_INVALID_CALLBACKS",""],["FLAC__StreamDecoderInitStatus_FLAC__STREAM_DECODER_INIT_STATUS_MEMORY_ALLOCATION_ERROR",""],["FLAC__StreamDecoderInitStatus_FLAC__STREAM_DECODER_INIT_STATUS_OK",""],["FLAC__StreamDecoderInitStatus_FLAC__STREAM_DECODER_INIT_STATUS_UNSUPPORTED_CONTAINER",""],["FLAC__StreamDecoderLengthStatus_FLAC__STREAM_DECODER_LENGTH_STATUS_ERROR",""],["FLAC__StreamDecoderLengthStatus_FLAC__STREAM_DECODER_LENGTH_STATUS_OK",""],["FLAC__StreamDecoderLengthStatus_FLAC__STREAM_DECODER_LENGTH_STATUS_UNSUPPORTED",""],["FLAC__StreamDecoderReadStatus_FLAC__STREAM_DECODER_READ_STATUS_ABORT",""],["FLAC__StreamDecoderReadStatus_FLAC__STREAM_DECODER_READ_STATUS_CONTINUE",""],["FLAC__StreamDecoderReadStatus_FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM",""],["FLAC__StreamDecoderSeekStatus_FLAC__STREAM_DECODER_SEEK_STATUS_ERROR",""],["FLAC__StreamDecoderSeekStatus_FLAC__STREAM_DECODER_SEEK_STATUS_OK",""],["FLAC__StreamDecoderSeekStatus_FLAC__STREAM_DECODER_SEEK_STATUS_UNSUPPORTED",""],["FLAC__StreamDecoderState_FLAC__STREAM_DECODER_ABORTED",""],["FLAC__StreamDecoderState_FLAC__STREAM_DECODER_END_OF_STREAM",""],["FLAC__StreamDecoderState_FLAC__STREAM_DECODER_MEMORY_ALLOCATION_ERROR",""],["FLAC__StreamDecoderState_FLAC__STREAM_DECODER_OGG_ERROR",""],["FLAC__StreamDecoderState_FLAC__STREAM_DECODER_READ_FRAME",""],["FLAC__StreamDecoderState_FLAC__STREAM_DECODER_READ_METADATA",""],["FLAC__StreamDecoderState_FLAC__STREAM_DECODER_SEARCH_FOR_FRAME_SYNC",""],["FLAC__StreamDecoderState_FLAC__STREAM_DECODER_SEARCH_FOR_METADATA",""],["FLAC__StreamDecoderState_FLAC__STREAM_DECODER_SEEK_ERROR",""],["FLAC__StreamDecoderState_FLAC__STREAM_DECODER_UNINITIALIZED",""],["FLAC__StreamDecoderTellStatus_FLAC__STREAM_DECODER_TELL_STATUS_ERROR",""],["FLAC__StreamDecoderTellStatus_FLAC__STREAM_DECODER_TELL_STATUS_OK",""],["FLAC__StreamDecoderTellStatus_FLAC__STREAM_DECODER_TELL_STATUS_UNSUPPORTED",""],["FLAC__StreamDecoderWriteStatus_FLAC__STREAM_DECODER_WRITE_STATUS_ABORT",""],["FLAC__StreamDecoderWriteStatus_FLAC__STREAM_DECODER_WRITE_STATUS_CONTINUE",""],["FLAC__StreamEncoderInitStatus_FLAC__STREAM_ENCODER_INIT_STATUS_ALREADY_INITIALIZED",""],["FLAC__StreamEncoderInitStatus_FLAC__STREAM_ENCODER_INIT_STATUS_BLOCK_SIZE_TOO_SMALL_FOR_LPC_ORDER",""],["FLAC__StreamEncoderInitStatus_FLAC__STREAM_ENCODER_INIT_STATUS_ENCODER_ERROR",""],["FLAC__StreamEncoderInitStatus_FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_BITS_PER_SAMPLE",""],["FLAC__StreamEncoderInitStatus_FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_BLOCK_SIZE",""],["FLAC__StreamEncoderInitStatus_FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_CALLBACKS",""],["FLAC__StreamEncoderInitStatus_FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_MAX_LPC_ORDER",""],["FLAC__StreamEncoderInitStatus_FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_METADATA",""],["FLAC__StreamEncoderInitStatus_FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_NUMBER_OF_CHANNELS",""],["FLAC__StreamEncoderInitStatus_FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_QLP_COEFF_PRECISION",""],["FLAC__StreamEncoderInitStatus_FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_SAMPLE_RATE",""],["FLAC__StreamEncoderInitStatus_FLAC__STREAM_ENCODER_INIT_STATUS_NOT_STREAMABLE",""],["FLAC__StreamEncoderInitStatus_FLAC__STREAM_ENCODER_INIT_STATUS_OK",""],["FLAC__StreamEncoderInitStatus_FLAC__STREAM_ENCODER_INIT_STATUS_UNSUPPORTED_CONTAINER",""],["FLAC__StreamEncoderReadStatus_FLAC__STREAM_ENCODER_READ_STATUS_ABORT",""],["FLAC__StreamEncoderReadStatus_FLAC__STREAM_ENCODER_READ_STATUS_CONTINUE",""],["FLAC__StreamEncoderReadStatus_FLAC__STREAM_ENCODER_READ_STATUS_END_OF_STREAM",""],["FLAC__StreamEncoderReadStatus_FLAC__STREAM_ENCODER_READ_STATUS_UNSUPPORTED",""],["FLAC__StreamEncoderSeekStatus_FLAC__STREAM_ENCODER_SEEK_STATUS_ERROR",""],["FLAC__StreamEncoderSeekStatus_FLAC__STREAM_ENCODER_SEEK_STATUS_OK",""],["FLAC__StreamEncoderSeekStatus_FLAC__STREAM_ENCODER_SEEK_STATUS_UNSUPPORTED",""],["FLAC__StreamEncoderState_FLAC__STREAM_ENCODER_CLIENT_ERROR",""],["FLAC__StreamEncoderState_FLAC__STREAM_ENCODER_FRAMING_ERROR",""],["FLAC__StreamEncoderState_FLAC__STREAM_ENCODER_IO_ERROR",""],["FLAC__StreamEncoderState_FLAC__STREAM_ENCODER_MEMORY_ALLOCATION_ERROR",""],["FLAC__StreamEncoderState_FLAC__STREAM_ENCODER_OGG_ERROR",""],["FLAC__StreamEncoderState_FLAC__STREAM_ENCODER_OK",""],["FLAC__StreamEncoderState_FLAC__STREAM_ENCODER_UNINITIALIZED",""],["FLAC__StreamEncoderState_FLAC__STREAM_ENCODER_VERIFY_DECODER_ERROR",""],["FLAC__StreamEncoderState_FLAC__STREAM_ENCODER_VERIFY_MISMATCH_IN_AUDIO_DATA",""],["FLAC__StreamEncoderTellStatus_FLAC__STREAM_ENCODER_TELL_STATUS_ERROR",""],["FLAC__StreamEncoderTellStatus_FLAC__STREAM_ENCODER_TELL_STATUS_OK",""],["FLAC__StreamEncoderTellStatus_FLAC__STREAM_ENCODER_TELL_STATUS_UNSUPPORTED",""],["FLAC__StreamEncoderWriteStatus_FLAC__STREAM_ENCODER_WRITE_STATUS_FATAL_ERROR",""],["FLAC__StreamEncoderWriteStatus_FLAC__STREAM_ENCODER_WRITE_STATUS_OK",""],["FLAC__StreamMetadata_Picture_Type_FLAC__STREAM_METADATA_PICTURE_TYPE_ARTIST","< Artist/performer"],["FLAC__StreamMetadata_Picture_Type_FLAC__STREAM_METADATA_PICTURE_TYPE_BACK_COVER","< Cover (back)"],["FLAC__StreamMetadata_Picture_Type_FLAC__STREAM_METADATA_PICTURE_TYPE_BAND","< Band/Orchestra"],["FLAC__StreamMetadata_Picture_Type_FLAC__STREAM_METADATA_PICTURE_TYPE_BAND_LOGOTYPE","< Band/artist logotype"],["FLAC__StreamMetadata_Picture_Type_FLAC__STREAM_METADATA_PICTURE_TYPE_COMPOSER","< Composer"],["FLAC__StreamMetadata_Picture_Type_FLAC__STREAM_METADATA_PICTURE_TYPE_CONDUCTOR","< Conductor"],["FLAC__StreamMetadata_Picture_Type_FLAC__STREAM_METADATA_PICTURE_TYPE_DURING_PERFORMANCE","< During performance"],["FLAC__StreamMetadata_Picture_Type_FLAC__STREAM_METADATA_PICTURE_TYPE_DURING_RECORDING","< During recording"],["FLAC__StreamMetadata_Picture_Type_FLAC__STREAM_METADATA_PICTURE_TYPE_FILE_ICON","< Other file icon"],["FLAC__StreamMetadata_Picture_Type_FLAC__STREAM_METADATA_PICTURE_TYPE_FILE_ICON_STANDARD","< 32x32 pixels 'file icon' (PNG only)"],["FLAC__StreamMetadata_Picture_Type_FLAC__STREAM_METADATA_PICTURE_TYPE_FISH","< A bright coloured fish"],["FLAC__StreamMetadata_Picture_Type_FLAC__STREAM_METADATA_PICTURE_TYPE_FRONT_COVER","< Cover (front)"],["FLAC__StreamMetadata_Picture_Type_FLAC__STREAM_METADATA_PICTURE_TYPE_ILLUSTRATION","< Illustration"],["FLAC__StreamMetadata_Picture_Type_FLAC__STREAM_METADATA_PICTURE_TYPE_LEAD_ARTIST","< Lead artist/lead performer/soloist"],["FLAC__StreamMetadata_Picture_Type_FLAC__STREAM_METADATA_PICTURE_TYPE_LEAFLET_PAGE","< Leaflet page"],["FLAC__StreamMetadata_Picture_Type_FLAC__STREAM_METADATA_PICTURE_TYPE_LYRICIST","< Lyricist/text writer"],["FLAC__StreamMetadata_Picture_Type_FLAC__STREAM_METADATA_PICTURE_TYPE_MEDIA","< Media (e.g. label side of CD)"],["FLAC__StreamMetadata_Picture_Type_FLAC__STREAM_METADATA_PICTURE_TYPE_OTHER","< Other"],["FLAC__StreamMetadata_Picture_Type_FLAC__STREAM_METADATA_PICTURE_TYPE_PUBLISHER_LOGOTYPE","< Publisher/Studio logotype"],["FLAC__StreamMetadata_Picture_Type_FLAC__STREAM_METADATA_PICTURE_TYPE_RECORDING_LOCATION","< Recording Location"],["FLAC__StreamMetadata_Picture_Type_FLAC__STREAM_METADATA_PICTURE_TYPE_UNDEFINED",""],["FLAC__StreamMetadata_Picture_Type_FLAC__STREAM_METADATA_PICTURE_TYPE_VIDEO_SCREEN_CAPTURE","< Movie/video screen capture"],["FLAC__SubframeType_FLAC__SUBFRAME_TYPE_CONSTANT","< constant signal"],["FLAC__SubframeType_FLAC__SUBFRAME_TYPE_FIXED","< fixed polynomial prediction"],["FLAC__SubframeType_FLAC__SUBFRAME_TYPE_LPC","< linear prediction"],["FLAC__SubframeType_FLAC__SUBFRAME_TYPE_VERBATIM","< uncompressed signal"],["FOPEN_MAX",""],["INT16_MAX",""],["INT16_MIN",""],["INT32_MAX",""],["INT32_MIN",""],["INT8_MAX",""],["INT8_MIN",""],["INTPTR_MAX",""],["INTPTR_MIN",""],["INT_FAST16_MAX",""],["INT_FAST16_MIN",""],["INT_FAST32_MAX",""],["INT_FAST32_MIN",""],["INT_FAST8_MAX",""],["INT_FAST8_MIN",""],["INT_LEAST16_MAX",""],["INT_LEAST16_MIN",""],["INT_LEAST32_MAX",""],["INT_LEAST32_MIN",""],["INT_LEAST8_MAX",""],["INT_LEAST8_MIN",""],["LITTLE_ENDIAN",""],["L_ctermid",""],["L_tmpnam",""],["PDP_ENDIAN",""],["PTRDIFF_MAX",""],["PTRDIFF_MIN",""],["P_tmpdir",""],["RAND_MAX",""],["SEEK_CUR",""],["SEEK_END",""],["SEEK_SET",""],["SIG_ATOMIC_MAX",""],["SIG_ATOMIC_MIN",""],["SIZE_MAX",""],["TMP_MAX",""],["UINT16_MAX",""],["UINT32_MAX",""],["UINT8_MAX",""],["UINTPTR_MAX",""],["UINT_FAST16_MAX",""],["UINT_FAST32_MAX",""],["UINT_FAST8_MAX",""],["UINT_LEAST16_MAX",""],["UINT_LEAST32_MAX",""],["UINT_LEAST8_MAX",""],["WCONTINUED",""],["WEXITED",""],["WINT_MAX",""],["WINT_MIN",""],["WNOHANG",""],["WNOWAIT",""],["WSTOPPED",""],["WUNTRACED",""],["_ALLOCA_H",""],["_ATFILE_SOURCE",""],["_BITS_BYTESWAP_H",""],["_BITS_PTHREADTYPES_ARCH_H",""],["_BITS_PTHREADTYPES_COMMON_H",""],["_BITS_STDINT_INTN_H",""],["_BITS_STDINT_UINTN_H",""],["_BITS_STDIO_LIM_H",""],["_BITS_TIME64_H",""],["_BITS_TYPESIZES_H",""],["_BITS_TYPES_H",""],["_BITS_UINTN_IDENTITY_H",""],["_BITS_WCHAR_H",""],["_DEFAULT_SOURCE",""],["_ENDIAN_H",""],["_FEATURES_H",""],["_IOFBF",""],["_IOLBF",""],["_IONBF",""],["_IO_EOF_SEEN",""],["_IO_ERR_SEEN",""],["_IO_USER_LOCK",""],["_POSIX_C_SOURCE",""],["_POSIX_SOURCE",""],["_STDC_PREDEF_H",""],["_STDINT_H",""],["_STDIO_H",""],["_STDLIB_H",""],["_STRUCT_TIMESPEC",""],["_SYS_CDEFS_H",""],["_SYS_SELECT_H",""],["_SYS_TYPES_H",""],["_THREAD_SHARED_TYPES_H",""],["__BIG_ENDIAN",""],["__BIT_TYPES_DEFINED__",""],["__BYTE_ORDER",""],["__FD_SETSIZE",""],["__FD_ZERO_STOS",""],["__FILE_defined",""],["__FLOAT_WORD_ORDER",""],["__GLIBC_MINOR__",""],["__GLIBC_USE_DEPRECATED_GETS",""],["__GLIBC_USE_DEPRECATED_SCANF",""],["__GLIBC_USE_IEC_60559_BFP_EXT",""],["__GLIBC_USE_IEC_60559_FUNCS_EXT",""],["__GLIBC_USE_IEC_60559_TYPES_EXT",""],["__GLIBC_USE_LIB_EXT2",""],["__GLIBC__",""],["__GNUC_VA_LIST",""],["__GNU_LIBRARY__",""],["__HAVE_DISTINCT_FLOAT128",""],["__HAVE_DISTINCT_FLOAT128X",""],["__HAVE_DISTINCT_FLOAT16",""],["__HAVE_DISTINCT_FLOAT32",""],["__HAVE_DISTINCT_FLOAT32X",""],["__HAVE_DISTINCT_FLOAT64",""],["__HAVE_DISTINCT_FLOAT64X",""],["__HAVE_FLOAT128",""],["__HAVE_FLOAT128X",""],["__HAVE_FLOAT16",""],["__HAVE_FLOAT32",""],["__HAVE_FLOAT32X",""],["__HAVE_FLOAT64",""],["__HAVE_FLOAT64X",""],["__HAVE_FLOAT64X_LONG_DOUBLE",""],["__HAVE_FLOATN_NOT_TYPEDEF",""],["__HAVE_GENERIC_SELECTION",""],["__INO_T_MATCHES_INO64_T",""],["__LITTLE_ENDIAN",""],["__OFF_T_MATCHES_OFF64_T",""],["__PDP_ENDIAN",""],["__PTHREAD_MUTEX_HAVE_PREV",""],["__PTHREAD_MUTEX_LOCK_ELISION",""],["__PTHREAD_MUTEX_NUSERS_AFTER_KIND",""],["__PTHREAD_MUTEX_USE_UNION",""],["__PTHREAD_RWLOCK_INT_FLAGS_SHARED",""],["__RLIM_T_MATCHES_RLIM64_T",""],["__SIZEOF_PTHREAD_ATTR_T",""],["__SIZEOF_PTHREAD_BARRIERATTR_T",""],["__SIZEOF_PTHREAD_BARRIER_T",""],["__SIZEOF_PTHREAD_CONDATTR_T",""],["__SIZEOF_PTHREAD_COND_T",""],["__SIZEOF_PTHREAD_MUTEXATTR_T",""],["__SIZEOF_PTHREAD_MUTEX_T",""],["__SIZEOF_PTHREAD_RWLOCKATTR_T",""],["__SIZEOF_PTHREAD_RWLOCK_T",""],["__STDC_IEC_559_COMPLEX__",""],["__STDC_IEC_559__",""],["__STDC_ISO_10646__",""],["__SYSCALL_WORDSIZE",""],["__TIMESIZE",""],["__USE_ATFILE",""],["__USE_FORTIFY_LEVEL",""],["__USE_ISOC11",""],["__USE_ISOC95",""],["__USE_ISOC99",""],["__USE_MISC",""],["__USE_POSIX",""],["__USE_POSIX199309",""],["__USE_POSIX199506",""],["__USE_POSIX2",""],["__USE_POSIX_IMPLICITLY",""],["__USE_XOPEN2K",""],["__USE_XOPEN2K8",""],["__WALL",""],["__WCLONE",""],["__WCOREFLAG",""],["__WNOTHREAD",""],["__WORDSIZE",""],["__WORDSIZE_TIME64_COMPAT32",""],["__W_CONTINUED",""],["____FILE_defined",""],["_____fpos64_t_defined",""],["_____fpos_t_defined",""],["____mbstate_t_defined",""],["__clock_t_defined",""],["__clockid_t_defined",""],["__glibc_c99_flexarr_available",""],["__have_pthread_attr_t",""],["__ldiv_t_defined",""],["__lldiv_t_defined",""],["__sigset_t_defined",""],["__struct_FILE_defined",""],["__time_t_defined",""],["__timer_t_defined",""],["__timeval_defined",""],["false_",""],["true_",""]],"fn":[["FLAC__format_blocksize_is_subset","Tests that a blocksize at the given sample rate is valid for the FLAC  subset."],["FLAC__format_cuesheet_is_legal","Check a cue sheet to see if it conforms to the FLAC specification.  See the format specification for limits on the contents of the  cue sheet."],["FLAC__format_picture_is_legal","Check picture data to see if it conforms to the FLAC specification.  See the format specification for limits on the contents of the  PICTURE block."],["FLAC__format_sample_rate_is_subset","Tests that a sample rate is valid for the FLAC subset.  The subset rules  for valid sample rates are slightly more complex since the rate has to  be expressible completely in the frame header."],["FLAC__format_sample_rate_is_valid","Tests that a sample rate is valid for FLAC."],["FLAC__format_seektable_is_legal","Check a seek table to see if it conforms to the FLAC specification.  See the format specification for limits on the contents of the  seek table."],["FLAC__format_seektable_sort","Sort a seek table's seek points according to the format specification.  This includes a \"unique-ification\" step to remove duplicates, i.e.  seek points with identical \\a sample_number values.  Duplicate seek  points are converted into placeholder points and sorted to the end of  the table."],["FLAC__format_vorbiscomment_entry_is_legal","Check a Vorbis comment entry to see if it conforms to the Vorbis  comment specification."],["FLAC__format_vorbiscomment_entry_name_is_legal","Check a Vorbis comment entry name to see if it conforms to the Vorbis  comment specification."],["FLAC__format_vorbiscomment_entry_value_is_legal","Check a Vorbis comment entry value to see if it conforms to the Vorbis  comment specification."],["FLAC__metadata_chain_check_if_tempfile_needed","Checks if writing the given chain would require the use of a  temporary file, or if it could be written in place."],["FLAC__metadata_chain_delete","Free a chain instance.  Deletes the object pointed to by \\a chain."],["FLAC__metadata_chain_merge_padding","Merge adjacent PADDING blocks into a single block."],["FLAC__metadata_chain_new","Create a new chain instance."],["FLAC__metadata_chain_read","Read all metadata from a FLAC file into the chain."],["FLAC__metadata_chain_read_ogg","Read all metadata from an Ogg FLAC file into the chain."],["FLAC__metadata_chain_read_ogg_with_callbacks","Read all metadata from an Ogg FLAC stream into the chain via I/O callbacks."],["FLAC__metadata_chain_read_with_callbacks","Read all metadata from a FLAC stream into the chain via I/O callbacks."],["FLAC__metadata_chain_sort_padding","This function will move all PADDING blocks to the end on the metadata,  then merge them into a single block."],["FLAC__metadata_chain_status","Get the current status of the chain.  Call this after a function  returns \\c false to get the reason for the error.  Also resets the  status to FLAC__METADATA_CHAIN_STATUS_OK."],["FLAC__metadata_chain_write","Write all metadata out to the FLAC file.  This function tries to be as  efficient as possible; how the metadata is actually written is shown by  the following:"],["FLAC__metadata_chain_write_with_callbacks","Write all metadata out to a FLAC stream via callbacks."],["FLAC__metadata_chain_write_with_callbacks_and_tempfile","Write all metadata out to a FLAC stream via callbacks."],["FLAC__metadata_get_cuesheet","Read the CUESHEET metadata block of the given FLAC file.  This  function will try to skip any ID3v2 tag at the head of the file."],["FLAC__metadata_get_picture","Read a PICTURE metadata block of the given FLAC file.  This  function will try to skip any ID3v2 tag at the head of the file.  Since there can be more than one PICTURE block in a file, this  function takes a number of parameters that act as constraints to  the search.  The PICTURE block with the largest area matching all  the constraints will be returned, or \\a *picture will be set to  \\c NULL if there was no such block."],["FLAC__metadata_get_streaminfo","Read the STREAMINFO metadata block of the given FLAC file.  This function  will try to skip any ID3v2 tag at the head of the file."],["FLAC__metadata_get_tags","Read the VORBIS_COMMENT metadata block of the given FLAC file.  This  function will try to skip any ID3v2 tag at the head of the file."],["FLAC__metadata_iterator_delete","Free an iterator instance.  Deletes the object pointed to by \\a iterator."],["FLAC__metadata_iterator_delete_block","Removes the current block from the chain.  If \\a replace_with_padding is  \\c true, the block will instead be replaced with a padding block of equal  size.  You can not delete the STREAMINFO block.  The iterator will be  left pointing to the block before the one just \"deleted\", even if  \\a replace_with_padding is \\c true."],["FLAC__metadata_iterator_get_block","Get the metadata block at the current position.  You can modify  the block in place but must write the chain before the changes  are reflected to the FLAC file.  You do not need to call  FLAC__metadata_iterator_set_block() to reflect the changes;  the pointer returned by FLAC__metadata_iterator_get_block()  points directly into the chain."],["FLAC__metadata_iterator_get_block_type","Get the type of the metadata block at the current position."],["FLAC__metadata_iterator_init","Initialize the iterator to point to the first metadata block in the  given chain."],["FLAC__metadata_iterator_insert_block_after","Insert a new block after the current block.  You cannot insert a STREAMINFO  block as there can be only one, the one that already exists at the head when  you read in a chain.  The chain takes ownership of the new block and it will  be deleted when the chain is deleted.  The iterator will be left pointing to  the new block."],["FLAC__metadata_iterator_insert_block_before","Insert a new block before the current block.  You cannot insert a block  before the first STREAMINFO block.  You cannot insert a STREAMINFO block  as there can be only one, the one that already exists at the head when you  read in a chain.  The chain takes ownership of the new block and it will be  deleted when the chain is deleted.  The iterator will be left pointing to  the new block."],["FLAC__metadata_iterator_new","Create a new iterator instance."],["FLAC__metadata_iterator_next","Moves the iterator forward one metadata block, returning \\c false if  already at the end."],["FLAC__metadata_iterator_prev","Moves the iterator backward one metadata block, returning \\c false if  already at the beginning."],["FLAC__metadata_iterator_set_block","Set the metadata block at the current position, replacing the existing  block.  The new block passed in becomes owned by the chain and it will be  deleted when the chain is deleted."],["FLAC__metadata_object_application_set_data","Sets the application data of an APPLICATION block."],["FLAC__metadata_object_clone","Create a copy of an existing metadata object."],["FLAC__metadata_object_cuesheet_calculate_cddb_id","Calculate and return the CDDB/freedb ID for a cue sheet.  The function  assumes the cue sheet corresponds to a CD; the result is undefined  if the cuesheet's is_cd bit is not set."],["FLAC__metadata_object_cuesheet_delete_track","Delete a track in a CUESHEET block at the given index."],["FLAC__metadata_object_cuesheet_insert_blank_track","Insert a blank track in a CUESHEET block at the given index."],["FLAC__metadata_object_cuesheet_insert_track","Insert a track in a CUESHEET block at the given index."],["FLAC__metadata_object_cuesheet_is_legal","Check a cue sheet to see if it conforms to the FLAC specification.  See the format specification for limits on the contents of the  cue sheet."],["FLAC__metadata_object_cuesheet_resize_tracks","Resize the track array."],["FLAC__metadata_object_cuesheet_set_track","Sets a track in a CUESHEET block."],["FLAC__metadata_object_cuesheet_track_clone","Create a copy of an existing CUESHEET track object."],["FLAC__metadata_object_cuesheet_track_delete","Delete a CUESHEET track object"],["FLAC__metadata_object_cuesheet_track_delete_index","Delete an index point in a CUESHEET track at the given index."],["FLAC__metadata_object_cuesheet_track_insert_blank_index","Insert a blank index point in a CUESHEET track at the given index."],["FLAC__metadata_object_cuesheet_track_insert_index","Insert an index point in a CUESHEET track at the given index."],["FLAC__metadata_object_cuesheet_track_new","Create a new CUESHEET track instance."],["FLAC__metadata_object_cuesheet_track_resize_indices","Resize a track's index point array."],["FLAC__metadata_object_delete","Free a metadata object.  Deletes the object pointed to by \\a object."],["FLAC__metadata_object_is_equal","Compares two metadata objects."],["FLAC__metadata_object_new","Create a new metadata object instance of the given type."],["FLAC__metadata_object_picture_is_legal","Check a PICTURE block to see if it conforms to the FLAC specification.  See the format specification for limits on the contents of the  PICTURE block."],["FLAC__metadata_object_picture_set_data","Sets the picture data of a PICTURE block."],["FLAC__metadata_object_picture_set_description","Sets the description of a PICTURE block."],["FLAC__metadata_object_picture_set_mime_type","Sets the MIME type of a PICTURE block."],["FLAC__metadata_object_seektable_delete_point","Delete a seekpoint from a seektable."],["FLAC__metadata_object_seektable_insert_point","Insert a seekpoint into a seektable."],["FLAC__metadata_object_seektable_is_legal","Check a seektable to see if it conforms to the FLAC specification.  See the format specification for limits on the contents of the  seektable."],["FLAC__metadata_object_seektable_resize_points","Resize the seekpoint array."],["FLAC__metadata_object_seektable_set_point","Set a seekpoint in a seektable."],["FLAC__metadata_object_seektable_template_append_placeholders","Append a number of placeholder points to the end of a seek table."],["FLAC__metadata_object_seektable_template_append_point","Append a specific seek point template to the end of a seek table."],["FLAC__metadata_object_seektable_template_append_points","Append specific seek point templates to the end of a seek table."],["FLAC__metadata_object_seektable_template_append_spaced_points","Append a set of evenly-spaced seek point templates to the end of a  seek table."],["FLAC__metadata_object_seektable_template_append_spaced_points_by_samples","Append a set of evenly-spaced seek point templates to the end of a  seek table."],["FLAC__metadata_object_seektable_template_sort","Sort a seek table's seek points according to the format specification,  removing duplicates."],["FLAC__metadata_object_vorbiscomment_append_comment","Appends a comment to a VORBIS_COMMENT block."],["FLAC__metadata_object_vorbiscomment_delete_comment","Delete a comment in a VORBIS_COMMENT block at the given index."],["FLAC__metadata_object_vorbiscomment_entry_from_name_value_pair","Creates a Vorbis comment entry from NUL-terminated name and value strings."],["FLAC__metadata_object_vorbiscomment_entry_matches","Check if the given Vorbis comment entry's field name matches the given  field name."],["FLAC__metadata_object_vorbiscomment_entry_to_name_value_pair","Splits a Vorbis comment entry into NUL-terminated name and value strings."],["FLAC__metadata_object_vorbiscomment_find_entry_from","Find a Vorbis comment with the given field name."],["FLAC__metadata_object_vorbiscomment_insert_comment","Insert a comment in a VORBIS_COMMENT block at the given index."],["FLAC__metadata_object_vorbiscomment_remove_entries_matching","Remove all Vorbis comments matching the given field name."],["FLAC__metadata_object_vorbiscomment_remove_entry_matching","Remove first Vorbis comment matching the given field name."],["FLAC__metadata_object_vorbiscomment_replace_comment","Replaces comments in a VORBIS_COMMENT block with a new one."],["FLAC__metadata_object_vorbiscomment_resize_comments","Resize the comment array."],["FLAC__metadata_object_vorbiscomment_set_comment","Sets a comment in a VORBIS_COMMENT block."],["FLAC__metadata_object_vorbiscomment_set_vendor_string","Sets the vendor string in a VORBIS_COMMENT block."],["FLAC__metadata_simple_iterator_delete","Free an iterator instance.  Deletes the object pointed to by \\a iterator."],["FLAC__metadata_simple_iterator_delete_block","Deletes the block at the current position.  This will cause the  entire FLAC file to be rewritten, unless \\a use_padding is \\c true,  in which case the block will be replaced by an equal-sized PADDING  block.  The iterator will be left pointing to the block before the  one just deleted."],["FLAC__metadata_simple_iterator_get_application_id","Get the application ID of the \\c APPLICATION block at the current  position.  This avoids reading the actual block data which can save  time for large blocks."],["FLAC__metadata_simple_iterator_get_block","Get the metadata block at the current position.  You can modify the  block but must use FLAC__metadata_simple_iterator_set_block() to  write it back to the FLAC file."],["FLAC__metadata_simple_iterator_get_block_length","Get the length of the metadata block at the current position.  This  avoids reading the actual block data which can save time for large  blocks."],["FLAC__metadata_simple_iterator_get_block_offset","Get the offset of the metadata block at the current position.  This  avoids reading the actual block data which can save time for large  blocks."],["FLAC__metadata_simple_iterator_get_block_type","Get the type of the metadata block at the current position.  This  avoids reading the actual block data which can save time for large  blocks."],["FLAC__metadata_simple_iterator_init","Initialize the iterator to point to the first metadata block in the  given FLAC file."],["FLAC__metadata_simple_iterator_insert_block_after","This is similar to FLAC__metadata_simple_iterator_set_block()  except that instead of writing over an existing block, it appends  a block after the existing block.  \\a use_padding is again used to  tell the function to try an expand into following padding in an  attempt to avoid rewriting the entire file."],["FLAC__metadata_simple_iterator_is_last","Returns a flag telling if the current metadata block is the last."],["FLAC__metadata_simple_iterator_is_writable","Returns \\c true if the FLAC file is writable.  If \\c false, calls to  FLAC__metadata_simple_iterator_set_block() and  FLAC__metadata_simple_iterator_insert_block_after() will fail."],["FLAC__metadata_simple_iterator_new","Create a new iterator instance."],["FLAC__metadata_simple_iterator_next","Moves the iterator forward one metadata block, returning \\c false if  already at the end."],["FLAC__metadata_simple_iterator_prev","Moves the iterator backward one metadata block, returning \\c false if  already at the beginning."],["FLAC__metadata_simple_iterator_set_block","Write a block back to the FLAC file.  This function tries to be  as efficient as possible; how the block is actually written is  shown by the following:"],["FLAC__metadata_simple_iterator_status","Get the current status of the iterator.  Call this after a function  returns \\c false to get the reason for the error.  Also resets the status  to FLAC__METADATA_SIMPLE_ITERATOR_STATUS_OK."],["FLAC__stream_decoder_delete","Free a decoder instance.  Deletes the object pointed to by \\a decoder."],["FLAC__stream_decoder_finish","Finish the decoding process.  Flushes the decoding buffer, releases resources, resets the decoder  settings to their defaults, and returns the decoder state to  FLAC__STREAM_DECODER_UNINITIALIZED."],["FLAC__stream_decoder_flush","Flush the stream input.  The decoder's input buffer will be cleared and the state set to  \\c FLAC__STREAM_DECODER_SEARCH_FOR_FRAME_SYNC.  This will also turn  off MD5 checking."],["FLAC__stream_decoder_get_bits_per_sample","Get the current sample resolution in the stream being decoded.  Will only be valid after decoding has started and will contain the  value from the most recently decoded frame header."],["FLAC__stream_decoder_get_blocksize","Get the current blocksize of the stream being decoded.  Will only be valid after decoding has started and will contain the  value from the most recently decoded frame header."],["FLAC__stream_decoder_get_channel_assignment","Get the current channel assignment in the stream being decoded.  Will only be valid after decoding has started and will contain the  value from the most recently decoded frame header."],["FLAC__stream_decoder_get_channels","Get the current number of channels in the stream being decoded.  Will only be valid after decoding has started and will contain the  value from the most recently decoded frame header."],["FLAC__stream_decoder_get_decode_position","Returns the decoder's current read position within the stream.  The position is the byte offset from the start of the stream.  Bytes before this position have been fully decoded.  Note that  there may still be undecoded bytes in the decoder's read FIFO.  The returned position is correct even after a seek."],["FLAC__stream_decoder_get_md5_checking","Get the \"MD5 signature checking\" flag.  This is the value of the setting, not whether or not the decoder is  currently checking the MD5 (remember, it can be turned off automatically  by a seek).  When the decoder is reset the flag will be restored to the  value returned by this function."],["FLAC__stream_decoder_get_resolved_state_string","Get the current decoder state as a C string."],["FLAC__stream_decoder_get_sample_rate","Get the current sample rate in Hz of the stream being decoded.  Will only be valid after decoding has started and will contain the  value from the most recently decoded frame header."],["FLAC__stream_decoder_get_state","Get the current decoder state."],["FLAC__stream_decoder_get_total_samples","Get the total number of samples in the stream being decoded.  Will only be valid after decoding has started and will contain the  value from the \\c STREAMINFO block.  A value of \\c 0 means \"unknown\"."],["FLAC__stream_decoder_init_FILE","Initialize the decoder instance to decode native FLAC files."],["FLAC__stream_decoder_init_file","Initialize the decoder instance to decode native FLAC files."],["FLAC__stream_decoder_init_ogg_FILE","Initialize the decoder instance to decode Ogg FLAC files."],["FLAC__stream_decoder_init_ogg_file","Initialize the decoder instance to decode Ogg FLAC files."],["FLAC__stream_decoder_init_ogg_stream","Initialize the decoder instance to decode Ogg FLAC streams."],["FLAC__stream_decoder_init_stream","Initialize the decoder instance to decode native FLAC streams."],["FLAC__stream_decoder_new","Create a new stream decoder instance.  The instance is created with  default settings; see the individual FLAC__stream_decoder_set_*()  functions for each setting's default."],["FLAC__stream_decoder_process_single","Decode one metadata block or audio frame.  This version instructs the decoder to decode a either a single metadata  block or a single frame and stop, unless the callbacks return a fatal  error or the read callback returns  \\c FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM."],["FLAC__stream_decoder_process_until_end_of_metadata","Decode until the end of the metadata.  This version instructs the decoder to decode from the current position  and continue until all the metadata has been read, or until the  callbacks return a fatal error or the read callback returns  \\c FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM."],["FLAC__stream_decoder_process_until_end_of_stream","Decode until the end of the stream.  This version instructs the decoder to decode from the current position  and continue until the end of stream (the read callback returns  \\c FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM), or until the  callbacks return a fatal error."],["FLAC__stream_decoder_reset","Reset the decoding process.  The decoder's input buffer will be cleared and the state set to  \\c FLAC__STREAM_DECODER_SEARCH_FOR_METADATA.  This is similar to  FLAC__stream_decoder_finish() except that the settings are  preserved; there is no need to call FLAC__stream_decoder_init_*()  before decoding again.  MD5 checking will be restored to its original  setting."],["FLAC__stream_decoder_seek_absolute","Flush the input and seek to an absolute sample.  Decoding will resume at the given sample.  Note that because of  this, the next write callback may contain a partial block.  The  client must support seeking the input or this function will fail  and return \\c false.  Furthermore, if the decoder state is  \\c FLAC__STREAM_DECODER_SEEK_ERROR, then the decoder must be flushed  with FLAC__stream_decoder_flush() or reset with  FLAC__stream_decoder_reset() before decoding can continue."],["FLAC__stream_decoder_set_md5_checking","Set the \"MD5 signature checking\" flag.  If \\c true, the decoder will  compute the MD5 signature of the unencoded audio data while decoding  and compare it to the signature from the STREAMINFO block, if it  exists, during FLAC__stream_decoder_finish()."],["FLAC__stream_decoder_set_metadata_ignore","Direct the decoder to filter out all metadata blocks of type \\a type."],["FLAC__stream_decoder_set_metadata_ignore_all","Direct the decoder to filter out all metadata blocks of any type."],["FLAC__stream_decoder_set_metadata_ignore_application","Direct the decoder to filter out all APPLICATION metadata blocks of  the given \\a id."],["FLAC__stream_decoder_set_metadata_respond","Direct the decoder to pass on all metadata blocks of type \\a type."],["FLAC__stream_decoder_set_metadata_respond_all","Direct the decoder to pass on all metadata blocks of any type."],["FLAC__stream_decoder_set_metadata_respond_application","Direct the decoder to pass on all APPLICATION metadata blocks of the  given \\a id."],["FLAC__stream_decoder_set_ogg_serial_number","Set the serial number for the FLAC stream within the Ogg container.  The default behavior is to use the serial number of the first Ogg  page.  Setting a serial number here will explicitly specify which  stream is to be decoded."],["FLAC__stream_decoder_skip_single_frame","Skip one audio frame.  This version instructs the decoder to 'skip' a single frame and stop,  unless the callbacks return a fatal error or the read callback returns  \\c FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM."],["FLAC__stream_encoder_delete","Free an encoder instance.  Deletes the object pointed to by \\a encoder."],["FLAC__stream_encoder_finish","Finish the encoding process.  Flushes the encoding buffer, releases resources, resets the encoder  settings to their defaults, and returns the encoder state to  FLAC__STREAM_ENCODER_UNINITIALIZED.  Note that this can generate  one or more write callbacks before returning, and will generate  a metadata callback."],["FLAC__stream_encoder_get_bits_per_sample","Get the input sample resolution setting."],["FLAC__stream_encoder_get_blocksize","Get the blocksize setting."],["FLAC__stream_encoder_get_channels","Get the number of input channels being processed."],["FLAC__stream_encoder_get_do_escape_coding","Get the \"escape coding\" flag."],["FLAC__stream_encoder_get_do_exhaustive_model_search","Get the exhaustive model search flag."],["FLAC__stream_encoder_get_do_mid_side_stereo","Get the \"mid/side stereo coding\" flag."],["FLAC__stream_encoder_get_do_qlp_coeff_prec_search","Get the qlp coefficient precision search flag."],["FLAC__stream_encoder_get_loose_mid_side_stereo","Get the \"adaptive mid/side switching\" flag."],["FLAC__stream_encoder_get_max_lpc_order","Get the maximum LPC order setting."],["FLAC__stream_encoder_get_max_residual_partition_order","Get maximum residual partition order setting."],["FLAC__stream_encoder_get_min_residual_partition_order","Get the minimum residual partition order setting."],["FLAC__stream_encoder_get_qlp_coeff_precision","Get the quantized linear predictor coefficient precision setting."],["FLAC__stream_encoder_get_resolved_state_string","Get the current encoder state as a C string.  This version automatically resolves  \\c FLAC__STREAM_ENCODER_VERIFY_DECODER_ERROR by getting the  verify decoder's state."],["FLAC__stream_encoder_get_rice_parameter_search_dist","Get the Rice parameter search distance setting."],["FLAC__stream_encoder_get_sample_rate","Get the input sample rate setting."],["FLAC__stream_encoder_get_state","Get the current encoder state."],["FLAC__stream_encoder_get_streamable_subset","Get the <A HREF=\"../format.html#subset>Subset flag."],["FLAC__stream_encoder_get_total_samples_estimate","Get the previously set estimate of the total samples to be encoded.  The encoder merely mimics back the value given to  FLAC__stream_encoder_set_total_samples_estimate() since it has no  other way of knowing how many samples the client will encode."],["FLAC__stream_encoder_get_verify","Get the \"verify\" flag."],["FLAC__stream_encoder_get_verify_decoder_error_stats","Get relevant values about the nature of a verify decoder error.  Useful when the stream encoder state is  \\c FLAC__STREAM_ENCODER_VERIFY_DECODER_ERROR.  The arguments should  be addresses in which the stats will be returned, or NULL if value  is not desired."],["FLAC__stream_encoder_get_verify_decoder_state","Get the state of the verify stream decoder.  Useful when the stream encoder state is  \\c FLAC__STREAM_ENCODER_VERIFY_DECODER_ERROR."],["FLAC__stream_encoder_init_FILE","Initialize the encoder instance to encode native FLAC files."],["FLAC__stream_encoder_init_file","Initialize the encoder instance to encode native FLAC files."],["FLAC__stream_encoder_init_ogg_FILE","Initialize the encoder instance to encode Ogg FLAC files."],["FLAC__stream_encoder_init_ogg_file","Initialize the encoder instance to encode Ogg FLAC files."],["FLAC__stream_encoder_init_ogg_stream","Initialize the encoder instance to encode Ogg FLAC streams."],["FLAC__stream_encoder_init_stream","Initialize the encoder instance to encode native FLAC streams."],["FLAC__stream_encoder_new","Create a new stream encoder instance.  The instance is created with  default settings; see the individual FLAC__stream_encoder_set_*()  functions for each setting's default."],["FLAC__stream_encoder_process","Submit data for encoding.  This version allows you to supply the input data via an array of  pointers, each pointer pointing to an array of \\a samples samples  representing one channel.  The samples need not be block-aligned,  but each channel should have the same number of samples.  Each sample  should be a signed integer, right-justified to the resolution set by  FLAC__stream_encoder_set_bits_per_sample().  For example, if the  resolution is 16 bits per sample, the samples should all be in the  range [-32768,32767]."],["FLAC__stream_encoder_process_interleaved","Submit data for encoding.  This version allows you to supply the input data where the channels  are interleaved into a single array (i.e. channel0_sample0,  channel1_sample0, ... , channelN_sample0, channel0_sample1, ...).  The samples need not be block-aligned but they must be  sample-aligned, i.e. the first value should be channel0_sample0  and the last value channelN_sampleM.  Each sample should be a signed  integer, right-justified to the resolution set by  FLAC__stream_encoder_set_bits_per_sample().  For example, if the  resolution is 16 bits per sample, the samples should all be in the  range [-32768,32767]."],["FLAC__stream_encoder_set_apodization","Sets the apodization function(s) the encoder will use when windowing  audio data for LPC analysis."],["FLAC__stream_encoder_set_bits_per_sample","Set the sample resolution of the input to be encoded."],["FLAC__stream_encoder_set_blocksize","Set the blocksize to use while encoding."],["FLAC__stream_encoder_set_channels","Set the number of channels to be encoded."],["FLAC__stream_encoder_set_compression_level","Set the compression level"],["FLAC__stream_encoder_set_do_escape_coding","Deprecated.  Setting this value has no effect."],["FLAC__stream_encoder_set_do_exhaustive_model_search","Set to \\c false to let the encoder estimate the best model order  based on the residual signal energy, or \\c true to force the  encoder to evaluate all order models and select the best."],["FLAC__stream_encoder_set_do_mid_side_stereo","Set to \\c true to enable mid-side encoding on stereo input.  The  number of channels must be 2 for this to have any effect.  Set to  \\c false to use only independent channel coding."],["FLAC__stream_encoder_set_do_qlp_coeff_prec_search","Set to \\c false to use only the specified quantized linear predictor  coefficient precision, or \\c true to search neighboring precision  values and use the best one."],["FLAC__stream_encoder_set_loose_mid_side_stereo","Set to \\c true to enable adaptive switching between mid-side and  left-right encoding on stereo input.  Set to \\c false to use  exhaustive searching.  Setting this to \\c true requires  FLAC__stream_encoder_set_do_mid_side_stereo() to also be set to  \\c true in order to have any effect."],["FLAC__stream_encoder_set_max_lpc_order","Set the maximum LPC order, or \\c 0 to use only the fixed predictors."],["FLAC__stream_encoder_set_max_residual_partition_order","Set the maximum partition order to search when coding the residual.  This is used in tandem with  FLAC__stream_encoder_set_min_residual_partition_order()."],["FLAC__stream_encoder_set_metadata","Set the metadata blocks to be emitted to the stream before encoding.  A value of \\c NULL, \\c 0 implies no metadata; otherwise, supply an  array of pointers to metadata blocks.  The array is non-const since  the encoder may need to change the \\a is_last flag inside them, and  in some cases update seek point offsets.  Otherwise, the encoder will  not modify or free the blocks.  It is up to the caller to free the  metadata blocks after encoding finishes."],["FLAC__stream_encoder_set_min_residual_partition_order","Set the minimum partition order to search when coding the residual.  This is used in tandem with  FLAC__stream_encoder_set_max_residual_partition_order()."],["FLAC__stream_encoder_set_ogg_serial_number","Set the serial number for the FLAC stream to use in the Ogg container."],["FLAC__stream_encoder_set_qlp_coeff_precision","Set the precision, in bits, of the quantized linear predictor  coefficients, or \\c 0 to let the encoder select it based on the  blocksize."],["FLAC__stream_encoder_set_rice_parameter_search_dist","Deprecated.  Setting this value has no effect."],["FLAC__stream_encoder_set_sample_rate","Set the sample rate (in Hz) of the input to be encoded."],["FLAC__stream_encoder_set_streamable_subset","Set the Subset flag.  If \\c true,  the encoder will comply with the Subset and will check the  settings during FLAC__stream_encoder_init_*() to see if all settings  comply.  If \\c false, the settings may take advantage of the full  range that the format allows."],["FLAC__stream_encoder_set_total_samples_estimate","Set an estimate of the total samples that will be encoded.  This is merely an estimate and may be set to \\c 0 if unknown.  This value will be written to the STREAMINFO block before encoding,  and can remove the need for the caller to rewrite the value later  if the value is known before encoding."],["FLAC__stream_encoder_set_verify","Set the \"verify\" flag.  If \\c true, the encoder will verify it's own  encoded output by feeding it through an internal decoder and comparing  the original signal against the decoded signal.  If a mismatch occurs,  the process call will return \\c false.  Note that this will slow the  encoding process by the extra time required for decoding and comparison."],["_Exit",""],["__ctype_get_mb_cur_max",""],["__getdelim",""],["__overflow",""],["__uflow",""],["a64l",""],["abort",""],["abs",""],["aligned_alloc",""],["alloca",""],["at_quick_exit",""],["atexit",""],["atof",""],["atoi",""],["atol",""],["atoll",""],["bsearch",""],["calloc",""],["clearenv",""],["clearerr",""],["clearerr_unlocked",""],["ctermid",""],["div",""],["dprintf",""],["drand48",""],["drand48_r",""],["ecvt",""],["ecvt_r",""],["erand48",""],["erand48_r",""],["exit",""],["fclose",""],["fcvt",""],["fcvt_r",""],["fdopen",""],["feof",""],["feof_unlocked",""],["ferror",""],["ferror_unlocked",""],["fflush",""],["fflush_unlocked",""],["fgetc",""],["fgetc_unlocked",""],["fgetpos",""],["fgets",""],["fileno",""],["fileno_unlocked",""],["flockfile",""],["fmemopen",""],["fopen",""],["fprintf",""],["fputc",""],["fputc_unlocked",""],["fputs",""],["fread",""],["fread_unlocked",""],["free",""],["freopen",""],["fscanf",""],["fscanf1",""],["fseek",""],["fseeko",""],["fsetpos",""],["ftell",""],["ftello",""],["ftrylockfile",""],["funlockfile",""],["fwrite",""],["fwrite_unlocked",""],["gcvt",""],["getc",""],["getc_unlocked",""],["getchar",""],["getchar_unlocked",""],["getdelim",""],["getenv",""],["getline",""],["getloadavg",""],["getsubopt",""],["getw",""],["initstate",""],["initstate_r",""],["jrand48",""],["jrand48_r",""],["l64a",""],["labs",""],["lcong48",""],["lcong48_r",""],["ldiv",""],["llabs",""],["lldiv",""],["lrand48",""],["lrand48_r",""],["malloc",""],["mblen",""],["mbstowcs",""],["mbtowc",""],["mkdtemp",""],["mkstemp",""],["mkstemps",""],["mktemp",""],["mrand48",""],["mrand48_r",""],["nrand48",""],["nrand48_r",""],["on_exit",""],["open_memstream",""],["pclose",""],["perror",""],["popen",""],["posix_memalign",""],["printf",""],["pselect",""],["putc",""],["putc_unlocked",""],["putchar",""],["putchar_unlocked",""],["putenv",""],["puts",""],["putw",""],["qecvt",""],["qecvt_r",""],["qfcvt",""],["qfcvt_r",""],["qgcvt",""],["qsort",""],["quick_exit",""],["rand",""],["rand_r",""],["random",""],["random_r",""],["realloc",""],["reallocarray",""],["realpath",""],["remove",""],["rename",""],["renameat",""],["rewind",""],["rpmatch",""],["scanf",""],["scanf1",""],["seed48",""],["seed48_r",""],["select",""],["setbuf",""],["setbuffer",""],["setenv",""],["setlinebuf",""],["setstate",""],["setstate_r",""],["setvbuf",""],["snprintf",""],["sprintf",""],["srand",""],["srand48",""],["srand48_r",""],["srandom",""],["srandom_r",""],["sscanf",""],["sscanf1",""],["strtod",""],["strtof",""],["strtol",""],["strtold",""],["strtoll",""],["strtoq",""],["strtoul",""],["strtoull",""],["strtouq",""],["system",""],["tempnam",""],["tmpfile",""],["tmpnam",""],["tmpnam_r",""],["ungetc",""],["unsetenv",""],["valloc",""],["vdprintf",""],["vfprintf",""],["vfscanf",""],["vfscanf1",""],["vprintf",""],["vscanf",""],["vscanf1",""],["vsnprintf",""],["vsprintf",""],["vsscanf",""],["vsscanf1",""],["wcstombs",""],["wctomb",""]],"static":[["FLAC_API_SUPPORTS_OGG_FLAC",""],["FLAC__ChannelAssignmentString",""],["FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE2_ESCAPE_PARAMETER",""],["FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE2_PARAMETER_LEN",""],["FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_ESCAPE_PARAMETER",""],["FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_ORDER_LEN",""],["FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_PARAMETER_LEN",""],["FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_RAW_LEN",""],["FLAC__ENTROPY_CODING_METHOD_TYPE_LEN",""],["FLAC__EntropyCodingMethodTypeString",""],["FLAC__FRAME_FOOTER_CRC_LEN",""],["FLAC__FRAME_HEADER_BITS_PER_SAMPLE_LEN",""],["FLAC__FRAME_HEADER_BLOCKING_STRATEGY_LEN",""],["FLAC__FRAME_HEADER_BLOCK_SIZE_LEN",""],["FLAC__FRAME_HEADER_CHANNEL_ASSIGNMENT_LEN",""],["FLAC__FRAME_HEADER_CRC_LEN",""],["FLAC__FRAME_HEADER_RESERVED_LEN",""],["FLAC__FRAME_HEADER_SAMPLE_RATE_LEN",""],["FLAC__FRAME_HEADER_SYNC",""],["FLAC__FRAME_HEADER_SYNC_LEN",""],["FLAC__FRAME_HEADER_ZERO_PAD_LEN",""],["FLAC__FrameNumberTypeString",""],["FLAC__MetadataTypeString",""],["FLAC__Metadata_ChainStatusString",""],["FLAC__Metadata_SimpleIteratorStatusString",""],["FLAC__STREAM_METADATA_APPLICATION_ID_LEN",""],["FLAC__STREAM_METADATA_CUESHEET_INDEX_NUMBER_LEN",""],["FLAC__STREAM_METADATA_CUESHEET_INDEX_OFFSET_LEN",""],["FLAC__STREAM_METADATA_CUESHEET_INDEX_RESERVED_LEN",""],["FLAC__STREAM_METADATA_CUESHEET_IS_CD_LEN",""],["FLAC__STREAM_METADATA_CUESHEET_LEAD_IN_LEN",""],["FLAC__STREAM_METADATA_CUESHEET_MEDIA_CATALOG_NUMBER_LEN",""],["FLAC__STREAM_METADATA_CUESHEET_NUM_TRACKS_LEN",""],["FLAC__STREAM_METADATA_CUESHEET_RESERVED_LEN",""],["FLAC__STREAM_METADATA_CUESHEET_TRACK_ISRC_LEN",""],["FLAC__STREAM_METADATA_CUESHEET_TRACK_NUMBER_LEN",""],["FLAC__STREAM_METADATA_CUESHEET_TRACK_NUM_INDICES_LEN",""],["FLAC__STREAM_METADATA_CUESHEET_TRACK_OFFSET_LEN",""],["FLAC__STREAM_METADATA_CUESHEET_TRACK_PRE_EMPHASIS_LEN",""],["FLAC__STREAM_METADATA_CUESHEET_TRACK_RESERVED_LEN",""],["FLAC__STREAM_METADATA_CUESHEET_TRACK_TYPE_LEN",""],["FLAC__STREAM_METADATA_IS_LAST_LEN",""],["FLAC__STREAM_METADATA_LENGTH_LEN",""],["FLAC__STREAM_METADATA_PICTURE_COLORS_LEN",""],["FLAC__STREAM_METADATA_PICTURE_DATA_LENGTH_LEN",""],["FLAC__STREAM_METADATA_PICTURE_DEPTH_LEN",""],["FLAC__STREAM_METADATA_PICTURE_DESCRIPTION_LENGTH_LEN",""],["FLAC__STREAM_METADATA_PICTURE_HEIGHT_LEN",""],["FLAC__STREAM_METADATA_PICTURE_MIME_TYPE_LENGTH_LEN",""],["FLAC__STREAM_METADATA_PICTURE_TYPE_LEN",""],["FLAC__STREAM_METADATA_PICTURE_WIDTH_LEN",""],["FLAC__STREAM_METADATA_SEEKPOINT_FRAME_SAMPLES_LEN",""],["FLAC__STREAM_METADATA_SEEKPOINT_PLACEHOLDER",""],["FLAC__STREAM_METADATA_SEEKPOINT_SAMPLE_NUMBER_LEN",""],["FLAC__STREAM_METADATA_SEEKPOINT_STREAM_OFFSET_LEN",""],["FLAC__STREAM_METADATA_STREAMINFO_BITS_PER_SAMPLE_LEN",""],["FLAC__STREAM_METADATA_STREAMINFO_CHANNELS_LEN",""],["FLAC__STREAM_METADATA_STREAMINFO_MAX_BLOCK_SIZE_LEN",""],["FLAC__STREAM_METADATA_STREAMINFO_MAX_FRAME_SIZE_LEN",""],["FLAC__STREAM_METADATA_STREAMINFO_MD5SUM_LEN",""],["FLAC__STREAM_METADATA_STREAMINFO_MIN_BLOCK_SIZE_LEN",""],["FLAC__STREAM_METADATA_STREAMINFO_MIN_FRAME_SIZE_LEN",""],["FLAC__STREAM_METADATA_STREAMINFO_SAMPLE_RATE_LEN",""],["FLAC__STREAM_METADATA_STREAMINFO_TOTAL_SAMPLES_LEN",""],["FLAC__STREAM_METADATA_TYPE_LEN",""],["FLAC__STREAM_METADATA_VORBIS_COMMENT_ENTRY_LENGTH_LEN",""],["FLAC__STREAM_METADATA_VORBIS_COMMENT_NUM_COMMENTS_LEN",""],["FLAC__STREAM_SYNC",""],["FLAC__STREAM_SYNC_LEN",""],["FLAC__STREAM_SYNC_STRING",""],["FLAC__SUBFRAME_LPC_QLP_COEFF_PRECISION_LEN",""],["FLAC__SUBFRAME_LPC_QLP_SHIFT_LEN",""],["FLAC__SUBFRAME_TYPE_CONSTANT_BYTE_ALIGNED_MASK",""],["FLAC__SUBFRAME_TYPE_FIXED_BYTE_ALIGNED_MASK",""],["FLAC__SUBFRAME_TYPE_LEN",""],["FLAC__SUBFRAME_TYPE_LPC_BYTE_ALIGNED_MASK",""],["FLAC__SUBFRAME_TYPE_VERBATIM_BYTE_ALIGNED_MASK",""],["FLAC__SUBFRAME_WASTED_BITS_FLAG_LEN",""],["FLAC__SUBFRAME_ZERO_PAD_LEN",""],["FLAC__StreamDecoderErrorStatusString",""],["FLAC__StreamDecoderInitStatusString",""],["FLAC__StreamDecoderLengthStatusString",""],["FLAC__StreamDecoderReadStatusString",""],["FLAC__StreamDecoderSeekStatusString",""],["FLAC__StreamDecoderStateString",""],["FLAC__StreamDecoderTellStatusString",""],["FLAC__StreamDecoderWriteStatusString",""],["FLAC__StreamEncoderInitStatusString",""],["FLAC__StreamEncoderReadStatusString",""],["FLAC__StreamEncoderSeekStatusString",""],["FLAC__StreamEncoderStateString",""],["FLAC__StreamEncoderTellStatusString",""],["FLAC__StreamEncoderWriteStatusString",""],["FLAC__StreamMetadata_Picture_TypeString",""],["FLAC__SubframeTypeString",""],["FLAC__VENDOR_STRING",""],["FLAC__VERSION_STRING",""],["stderr",""],["stdin",""],["stdout",""],["sys_errlist",""],["sys_nerr",""]],"struct":[["FLAC__EntropyCodingMethod","Header for the entropy coding method.  (c.f. format specification)"],["FLAC__EntropyCodingMethod_PartitionedRice","Header for a Rice partitioned residual.  (c.f. format specification)"],["FLAC__EntropyCodingMethod_PartitionedRiceContents","Contents of a Rice partitioned residual"],["FLAC__Frame","FLAC frame structure.  (c.f. format specification)"],["FLAC__FrameFooter","FLAC frame footer structure.  (c.f. format specification)"],["FLAC__FrameHeader","FLAC frame header structure.  (c.f. format specification)"],["FLAC__IOCallbacks","A structure for holding a set of callbacks. Each FLAC interface that requires a FLAC__IOCallbacks structure will describe which of the callbacks are required.  The ones that are not required may be set to NULL."],["FLAC__Metadata_Chain","\\defgroup flac_metadata_level2 FLAC/metadata.h: metadata level 2 interface  \\ingroup flac_metadata"],["FLAC__Metadata_Iterator",""],["FLAC__Metadata_SimpleIterator","\\defgroup flac_metadata_level1 FLAC/metadata.h: metadata level 1 interface  \\ingroup flac_metadata"],["FLAC__StreamDecoder","The opaque structure definition for the stream decoder type. See the \\link flac_stream_decoder stream decoder module \\endlink for a detailed description."],["FLAC__StreamDecoderPrivate",""],["FLAC__StreamDecoderProtected","class FLAC__StreamDecoder"],["FLAC__StreamEncoder","The opaque structure definition for the stream encoder type. See the \\link flac_stream_encoder stream encoder module \\endlink for a detailed description."],["FLAC__StreamEncoderPrivate",""],["FLAC__StreamEncoderProtected","class FLAC__StreamEncoder"],["FLAC__StreamMetadata","FLAC metadata block structure.  (c.f. format specification)"],["FLAC__StreamMetadata_Application","FLAC APPLICATION structure.  (c.f. format specification)"],["FLAC__StreamMetadata_CueSheet","FLAC CUESHEET structure.  (See the format specification for the full description of each field.)"],["FLAC__StreamMetadata_CueSheet_Index","FLAC CUESHEET track index structure.  (See the format specification for the full description of each field.)"],["FLAC__StreamMetadata_CueSheet_Track","FLAC CUESHEET track structure.  (See the format specification for the full description of each field.)"],["FLAC__StreamMetadata_Padding","FLAC PADDING structure.  (c.f. format specification)"],["FLAC__StreamMetadata_Picture","FLAC PICTURE structure.  (See the format specification for the full description of each field.)"],["FLAC__StreamMetadata_SeekPoint","SeekPoint structure used in SEEKTABLE blocks.  (c.f. format specification)"],["FLAC__StreamMetadata_SeekTable","FLAC SEEKTABLE structure.  (c.f. format specification)"],["FLAC__StreamMetadata_StreamInfo","FLAC STREAMINFO structure.  (c.f. format specification)"],["FLAC__StreamMetadata_Unknown","Structure that is used when a metadata block of unknown type is loaded. The contents are opaque.  The structure is used only internally to correctly handle unknown metadata."],["FLAC__StreamMetadata_VorbisComment","FLAC VORBIS_COMMENT structure.  (c.f. format specification)"],["FLAC__StreamMetadata_VorbisComment_Entry","Vorbis comment entry structure used in VORBIS_COMMENT blocks.  (c.f. format specification)"],["FLAC__Subframe","FLAC subframe structure.  (c.f. format specification)"],["FLAC__Subframe_Constant","CONSTANT subframe.  (c.f. format specification)"],["FLAC__Subframe_Fixed","FIXED subframe.  (c.f. format specification)"],["FLAC__Subframe_LPC","LPC subframe.  (c.f. format specification)"],["FLAC__Subframe_Verbatim","VERBATIM subframe.  (c.f. format specification)"],["_G_fpos64_t",""],["_G_fpos_t",""],["_IO_FILE",""],["_IO_codecvt",""],["_IO_marker",""],["_IO_wide_data",""],["__BindgenBitfieldUnit",""],["__fsid_t",""],["__mbstate_t",""],["__pthread_cond_s",""],["__pthread_cond_s__bindgen_ty_1__bindgen_ty_1",""],["__pthread_cond_s__bindgen_ty_2__bindgen_ty_1",""],["__pthread_internal_list",""],["__pthread_mutex_s",""],["__pthread_rwlock_arch_t",""],["__sigset_t",""],["__va_list_tag",""],["div_t",""],["drand48_data",""],["fd_set",""],["ldiv_t",""],["lldiv_t",""],["random_data",""],["timespec",""],["timeval",""]],"type":[["FILE",""],["FLAC__ChannelAssignment","An enumeration of the available channel assignments."],["FLAC__EntropyCodingMethodType","An enumeration of the available entropy coding methods."],["FLAC__FrameNumberType","An enumeration of the possible frame numbering methods."],["FLAC__IOCallback_Close","Signature for the close callback.  The signature and semantics match POSIX fclose() implementations  and can generally be used interchangeably."],["FLAC__IOCallback_Eof","Signature for the EOF callback.  The signature and semantics mostly match POSIX feof() but WATCHOUT:  on many systems, feof() is a macro, so in this case a wrapper function  must be provided instead."],["FLAC__IOCallback_Read","Signature for the read callback.  The signature and semantics match POSIX fread() implementations  and can generally be used interchangeably."],["FLAC__IOCallback_Seek","Signature for the seek callback.  The signature and semantics mostly match POSIX fseek() WITH ONE IMPORTANT  EXCEPTION: the offset is a 64-bit type whereas fseek() is generally 'long'  and 32-bits wide."],["FLAC__IOCallback_Tell","Signature for the tell callback.  The signature and semantics mostly match POSIX ftell() WITH ONE IMPORTANT  EXCEPTION: the offset is a 64-bit type whereas ftell() is generally 'long'  and 32-bits wide."],["FLAC__IOCallback_Write","Signature for the write callback.  The signature and semantics match POSIX fwrite() implementations  and can generally be used interchangeably."],["FLAC__IOHandle","This is the opaque handle type used by the callbacks.  Typically this is a \\c FILE* or address of a file descriptor."],["FLAC__MetadataType","An enumeration of the available metadata block types."],["FLAC__Metadata_ChainStatus",""],["FLAC__Metadata_SimpleIteratorStatus","Status type for FLAC__Metadata_SimpleIterator."],["FLAC__StreamDecoderEofCallback","Signature for the EOF callback."],["FLAC__StreamDecoderErrorCallback","Signature for the error callback."],["FLAC__StreamDecoderErrorStatus","Possible values passed back to the FLAC__StreamDecoder error callback. \\c FLAC__STREAM_DECODER_ERROR_STATUS_LOST_SYNC is the generic catch- all.  The rest could be caused by bad sync (false synchronization on data that is not the start of a frame) or corrupted data.  The error itself is the decoder's best guess at what happened assuming a correct sync.  For example \\c FLAC__STREAM_DECODER_ERROR_STATUS_BAD_HEADER could be caused by a correct sync on the start of a frame, but some data in the frame header was corrupted.  Or it could be the result of syncing on a point the stream that looked like the starting of a frame but was not.  \\c FLAC__STREAM_DECODER_ERROR_STATUS_UNPARSEABLE_STREAM could be because the decoder encountered a valid frame made by a future version of the encoder which it cannot parse, or because of a false sync making it appear as though an encountered frame was generated by a future encoder."],["FLAC__StreamDecoderInitStatus","Possible return values for the FLAC__stream_decoder_init_*() functions."],["FLAC__StreamDecoderLengthCallback","Signature for the length callback."],["FLAC__StreamDecoderLengthStatus","Return values for the FLAC__StreamDecoder length callback."],["FLAC__StreamDecoderMetadataCallback","Signature for the metadata callback."],["FLAC__StreamDecoderReadCallback","Signature for the read callback."],["FLAC__StreamDecoderReadStatus","Return values for the FLAC__StreamDecoder read callback."],["FLAC__StreamDecoderSeekCallback","Signature for the seek callback."],["FLAC__StreamDecoderSeekStatus","Return values for the FLAC__StreamDecoder seek callback."],["FLAC__StreamDecoderState","State values for a FLAC__StreamDecoder"],["FLAC__StreamDecoderTellCallback","Signature for the tell callback."],["FLAC__StreamDecoderTellStatus","Return values for the FLAC__StreamDecoder tell callback."],["FLAC__StreamDecoderWriteCallback","Signature for the write callback."],["FLAC__StreamDecoderWriteStatus","Return values for the FLAC__StreamDecoder write callback."],["FLAC__StreamEncoderInitStatus","Possible return values for the FLAC__stream_encoder_init_*() functions."],["FLAC__StreamEncoderMetadataCallback","Signature for the metadata callback."],["FLAC__StreamEncoderProgressCallback","Signature for the progress callback."],["FLAC__StreamEncoderReadCallback","Signature for the read callback."],["FLAC__StreamEncoderReadStatus","Return values for the FLAC__StreamEncoder read callback."],["FLAC__StreamEncoderSeekCallback","Signature for the seek callback."],["FLAC__StreamEncoderSeekStatus","Return values for the FLAC__StreamEncoder seek callback."],["FLAC__StreamEncoderState","State values for a FLAC__StreamEncoder."],["FLAC__StreamEncoderTellCallback","Signature for the tell callback."],["FLAC__StreamEncoderTellStatus","Return values for the FLAC__StreamEncoder tell callback."],["FLAC__StreamEncoderWriteCallback","Signature for the write callback."],["FLAC__StreamEncoderWriteStatus","Return values for the FLAC__StreamEncoder write callback."],["FLAC__StreamMetadata_Picture_Type","An enumeration of the PICTURE types (see FLAC__StreamMetadataPicture and id3 v2.4 APIC tag)."],["FLAC__SubframeType","An enumeration of the available subframe types."],["FLAC__bool",""],["FLAC__byte",""],["FLAC__int16",""],["FLAC__int32",""],["FLAC__int64",""],["FLAC__int8",""],["FLAC__uint16",""],["FLAC__uint32",""],["FLAC__uint64",""],["FLAC__uint8",""],["_Float32",""],["_Float32x",""],["_Float64",""],["_Float64x",""],["_IO_lock_t",""],["__FILE",""],["__blkcnt64_t",""],["__blkcnt_t",""],["__blksize_t",""],["__builtin_va_list",""],["__caddr_t",""],["__clock_t",""],["__clockid_t",""],["__compar_fn_t",""],["__daddr_t",""],["__dev_t",""],["__fd_mask",""],["__fpos64_t",""],["__fpos_t",""],["__fsblkcnt64_t",""],["__fsblkcnt_t",""],["__fsfilcnt64_t",""],["__fsfilcnt_t",""],["__fsword_t",""],["__gid_t",""],["__gnuc_va_list",""],["__id_t",""],["__ino64_t",""],["__ino_t",""],["__int16_t",""],["__int32_t",""],["__int64_t",""],["__int8_t",""],["__int_least16_t",""],["__int_least32_t",""],["__int_least64_t",""],["__int_least8_t",""],["__intmax_t",""],["__intptr_t",""],["__key_t",""],["__loff_t",""],["__mode_t",""],["__nlink_t",""],["__off64_t",""],["__off_t",""],["__pid_t",""],["__pthread_list_t",""],["__quad_t",""],["__rlim64_t",""],["__rlim_t",""],["__sig_atomic_t",""],["__socklen_t",""],["__ssize_t",""],["__suseconds_t",""],["__syscall_slong_t",""],["__syscall_ulong_t",""],["__time_t",""],["__timer_t",""],["__u_char",""],["__u_int",""],["__u_long",""],["__u_quad_t",""],["__u_short",""],["__uid_t",""],["__uint16_t",""],["__uint32_t",""],["__uint64_t",""],["__uint8_t",""],["__uint_least16_t",""],["__uint_least32_t",""],["__uint_least64_t",""],["__uint_least8_t",""],["__uintmax_t",""],["__useconds_t",""],["blkcnt_t",""],["blksize_t",""],["caddr_t",""],["clock_t",""],["clockid_t",""],["daddr_t",""],["dev_t",""],["fd_mask",""],["fpos_t",""],["fsblkcnt_t",""],["fsfilcnt_t",""],["fsid_t",""],["gid_t",""],["id_t",""],["ino_t",""],["int_fast16_t",""],["int_fast32_t",""],["int_fast64_t",""],["int_fast8_t",""],["int_least16_t",""],["int_least32_t",""],["int_least64_t",""],["int_least8_t",""],["intmax_t",""],["key_t",""],["loff_t",""],["mode_t",""],["nlink_t",""],["off_t",""],["pid_t",""],["pthread_key_t",""],["pthread_once_t",""],["pthread_spinlock_t",""],["pthread_t",""],["quad_t",""],["register_t",""],["sigset_t",""],["suseconds_t",""],["time_t",""],["timer_t",""],["u_char",""],["u_int",""],["u_int16_t",""],["u_int32_t",""],["u_int64_t",""],["u_int8_t",""],["u_long",""],["u_quad_t",""],["u_short",""],["uid_t",""],["uint",""],["uint_fast16_t",""],["uint_fast32_t",""],["uint_fast64_t",""],["uint_fast8_t",""],["uint_least16_t",""],["uint_least32_t",""],["uint_least64_t",""],["uint_least8_t",""],["uintmax_t",""],["ulong",""],["ushort",""],["va_list",""],["wchar_t",""]],"union":[["FLAC__EntropyCodingMethod__bindgen_ty_1",""],["FLAC__FrameHeader__bindgen_ty_1",""],["FLAC__StreamMetadata__bindgen_ty_1",""],["FLAC__Subframe__bindgen_ty_1",""],["__mbstate_t__bindgen_ty_1",""],["__pthread_cond_s__bindgen_ty_1",""],["__pthread_cond_s__bindgen_ty_2",""],["pthread_attr_t",""],["pthread_barrier_t",""],["pthread_barrierattr_t",""],["pthread_cond_t",""],["pthread_condattr_t",""],["pthread_mutex_t",""],["pthread_mutexattr_t",""],["pthread_rwlock_t",""],["pthread_rwlockattr_t",""]]});